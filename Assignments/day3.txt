Chapter 3: Laying the foundation
Session #3 of Namaste React course:
Topics covered in this session:
Bable
JSX
Writing functional components

HW:
- Read about dependencies, Dev-dependencies, global dependencies.
- Install the package: babel-plugin-transform-remove-console with -D. Configure it.
- List Major differences between HTML and JSX.
- How to do : classnames, different uses, multiple tags in jsx, image tags in JSX.
- Read Babel documentation.	

-----
- Some browsers doesnt support ES6. We need something to convert our code to older versions. This is done by babel(transpiler).
- Polyfill is a code which is replacement for a newer version of code. New code converted to old version of code.
Ex:Promises, map()
- New code (Es6) ---->> [babel] -----> Old code (polyfill)
- create-react-app uses Webpack along with Babel.

Q. How do you make your app fast and performant?
- React has some features (VirtualDOM, Lazy loading) within itself to make app fast. In addition, with the help of bundlers features 
(Tree Shaking, Minification, File Watcher Algorithms), our app can be made fast & performant.

- npx commands are used for executing packages directly without installing in your app. 
npm commands are used when you want to install packages in your app.
In fact assume, npx = npm run

IMP**
Use below command: to create new branch from the existing branch
$git checkout -b br3_day3_foundation 

- When parcel is bulding prod code, console logs are not automatically removed. 
Need to configure your project to remove console log.
Install the package: babel-plugin-transform-remove-console with -D
Configuration can be done through babelrc. babelrc is a configuration for Babel.

- Render means updating something in the DOM.
- Keys are used to uniquely identify sublings in a DOM. By giving keys, it helps React to re-render the components in the DOM 
in much efficient way. This makes Performant.
Ex: <div>
		<h1 key="key1>
		<h1 key="key2">
	<div> : div: parent, h1,h2 are subligns of div
	
- How does React.createElement work?
 React.createElement() ==> Object ==> HTML(DOM)
 
- It is not developer friendly(pain) to write bigger html structure for large application using React.createElement. 
So FB developers came up with JSX which provides the same functionality of React.createElement in much simpler way(JSX).

NOTE: 
- Main intention of building React was to write all the html code in Javascript code in a better way. Because JS is very performant.

- Ex: 
html code: <h1>Namaste React<h1>

React code: to write above html
const heading = React.createElement("h1", 
					{
					id:'id1',
					key :'key1',
					tab-index : "12"
					},
					"Namaste React")  ==> React element

IMP**JSX code: to write above React code
const heading = <h1 id="id1" key="key1" tabIndex="12">Namaste React</h1> ==> JSX expression/React Element
					
NOTE:
- Is JSX; html inside Javascript? 
No. JSX provides object and not html tag. It is html like syntax inside Javascript.
- id attribute in html is different from keys in jsx element. Never confuse. Both are different concept.

- JSX uses camel case similar to Javascript. Ex: tabIndex. In html, tab-index
class is used in html, className in JSX.

- Browser doesnt understand above JSX code. Try this code in browser console. Doesn't understnad '<>'. 
It is babel which compiles JSX code word by word and converts into html elements when it encounters jsx tag.

- How does JSX work?
	JSX ==> React.createElement(behind the scenes by BABEL) => Object ==> Html(DOM) element
	React.createElement() ==> Object ==> HTML(DOM)
	
***Babel converts JSX behind the scenes into React.createElement. Read documentation & check code.
JSX was developed by Facebook developers.
Babel not sure. 
No need to import JSX.
Babel doesnt need to be imported(comes with parcel/webpack). It automatically converts your code into old code.

- Components :
1. Functional : new
2. Class Based : old

- Functional component is nothing but a function that returns some piece of jsx or React element or composition of 
React element or component itself.
Ex: 
const HeaderComponent = () => {
	return <h1>Namaste React from Functional Component!</h1>
}

- Functiona component is a normal function
- Name starts with Capital letter. - Good practice, normal convention
- If returning multiple elements, then use () in return statement.
const HeaderComponent = () => {
	return (
		<div>
			<h2>Welcome</h2>
		</div>
	)
}

IMP***:
Below code is just same: Some developers write this. Arrow function syntax of Es6-Js.
const HeaderComponent = () => (
			<div>
				<h1>Namaste React from Functional Component first tag!</h1>
				<h2>Namaste React from Functional Component second tag!</h2>
			</div>
			)

Similar variants:
const HeaderComponent = function(){
	return (<div>
				<h1>Namaste React from Functional Component first tag!</h1>
				<h2>Namaste React from Functional Component second tag!</h2>
			</div>)
}
			
To call/render React component: <HeaderComponent />

IMP: React element vs React Component
Ex: h1 is react element(object/JSX variable). HeaderComponent is functional component(React component/JSX function).
React elements are rendered like variable. root.render(heading)
React components are rendered like html like tag. <HeaderComponent />

- To render react elements inside React components, use React element inside curly parenthesis{}
const HeaderComponent = function(){
	return (<div>
				{heading} : React element
				/*<Heading /> */ : functional component
				/{Heading()} */ : Functional component called as a function
				<h1>Namaste React from Functional Component first tag!</h1>
				<h2>Namaste React from Functional Component second tag!</h2>
			</div>)
}
IMP***:
- You can write any Javscript code inside JSX inside curly parenthesis.
Ex: 
const xyz = 10;

const HeaderComponent = function(){
	return (<div>
				{xyz}
				{console.log(xyz)}
				{10+20}
				<h1>Namaste React from Functional Component first tag!</h1>
				<h2>Namaste React from Functional Component second tag!</h2>
			</div>)
}
- JSX is very secure. Prevents XSS (cross site scripting) attack. JSX sanitizes to prevent any attack.
- Component Composition : A component inside a component. Above ex.

- Babel needs to be there if you are using JSX in your code. It can come through parcel/webpack/vite.

- Parcel is added as dev dependency. How babel will work in prod? 
because of package-lock.json. npm run & build is executed on server, dist folder will be created. dist folder is deployed into production.

- {{}} - how 2 parenthesis work? 
It works as a Javascript object. Inside first parenthesis is JS code.

- Babel is a compiler that creates a polyfill. polyfill is a piece of code that is replacement for newer version of code 
compatible for older versions of browser.

- Browser doesn't understand JSX /babel. Because browser uses Javascript engine which understand only javascript code.

1. What is JSX?
JSX is a syntex extensin created by Facebook. It makes us easy to understand the code and makes the code easy to maintain.

2. Superpowers of JSX.
. JSX is a syntactical extension to JavaScript. It comes with the full power of JavaScript.
 JSX produces React elements and can embed any JavaScript expression. Ultimately, the JSX 
 is converted to JavaScript using compiler/transformers.
		advantages of jsx- 
		----------------
			Readability
			less code 
			syntactical sugar
			maintainability
			No repeatition
			developer friendly
3. Role of type attribute in script tag? What options can I use there?
The type attribute in the script tag defines the type of script that we we want to run inside our app. type attribute can be of the following types:

text/javascript : It is the basic standard of writing javascript code inside the <script> tag.
e.g

<script type="text/javascript">
    const a = "Hello";
    const b = "World!";
    console.log(a + " " + b); // Hello World!
</script>
text/ecmascript : this value indicates that the script is following the EcmaScript standards.

module: This value tells the browser that the script is a module that can import or export other files or modules inside it.

text/babel : This value indicates that the script is a babel type and required bable to transpile it.

text/typescript: As the name suggest the script is written in TypeScript.

4. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.
{TitleComponent}: This value describes the TitleComponent as a javascript expession or a value. The {} can embed a javascript expression or a values inside it.

<TitleComponent/> : This value represents a Component that is basically returning Some JSX value. in simple terms TitleComponent a function that is returning a JSX value. A compoenet is written inside the {<  />} expression.

<TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no children components.The opening and closing tags are created to include the child components.

e.g.

<TitleComponent>
    <ChildComponen1 />
    <ChildComponen2 />
    <ChildComponen3 />
</TitleComponent>
